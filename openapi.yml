openapi: 3.0.3
info:
  title: EazyShop Products API Definition  
  description: |
    # About Us
      **EazyShop** is a open market product selling company. Any website can list our products by  using our _APIs_. Shipping & other logistics will be taken care by us. You will get an `Affiliate commision` for selling our products.
    # Categories suported 
      - Mobiles
        - Apple 
        - Samsung
        - OnePlus
      - Laptops
      - Televisions
      - Headphones
  termsOfService: https://easyshop.com/terms/
  contact: 
    name: API Support
    url: https://www.easyshop.com/supprt
    email: support@eazyshop.com
  license:
    name: EasyShop License
    url: http://www.easyshop.com/license
  version: 0.0.1
externalDocs:
  description: External Docs
  url: https://example.com
servers:
  - url: https://dev.eazyshop-server.com/v1
    description: Development server
tags:
  - name: Categories
    description: Categories-related operations
  - name: Products
    description: Products-related operations
  - name: Orders
    description: Orders-related operations
security: 
  - BasicAuth: []
  - BearerAuth: []
  - ApiKeyAuth: []
  - oAuth2AuthCode:
    - read
    - write
    - admin
paths:
  /categories:
    get:
      tags: 
        - Categories
      summary: List all categories
      description: Returns the list of categories supported by EasyShop
      operationId: getCategories
      security:
        - BasicAuth: []
      parameters: 
        - name: page
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          examples:
            mobiles:
              summary: Use this example for mobiles
              value: 101
            laptops:
              value: 102
            headphones:
              value: 103
            televisions:
              value: 104
      responses:
        '200':
          description: A list of categories
          content: 
            application/json: 
              schema:
                type: array
                items:
                 type: object
                 properties:
                  categoryId:
                    type: integer
                  name:
                    type: string
              examples:
                all-categories-data:
                  summary: Categories example data
                  value:
                    - categoryId: 101
                      name: Mobiles
                    - categoryId: 102
                      name: Laptops
                    - categoryId: 103
                      name: Headphones
                    - categoryId: 104
                      name: Televisions
                single-category-data:
                  summary: Single category example data
                  value:
                    - categoryId: 101
                      name: Mobiles
  /categories/{categoryId}:
    get:
      tags: 
        - Categories
      summary: List specific categories
      description: Returns category by Id
      operationId: getCategoryDetails
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 101
      responses:
          '200':
            description: A list of categories 
            content:
              application:/json:
                schema:
                  type: object
                  properties:
                    categoryId:
                      type: integer
                    name:
                      type: string
  /products:
    get:
      tags: 
        - Products
      summary: List all products
      description: |
        Returns the list of products supported by EasyShop
      operationId: getProducts
      parameters:
        - name: categoryId
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 101
      responses: 
        '200':
          description: A list of products
          content: 
            application/json: 
              schema:
                type: array
                items:
                 type: object
                 properties:
                  productId:
                    type: integer
                  name:
                    type: string
                  price:
                    type: number
                  categoryName:
                    type: string
                  releaseDate: 
                    type: string
                    format: date
                    readOnly: true
                  quantity:
                    type: integer
                    description: |   
                         ***Quantity*** represents `stock` value when this field is being sent by EazyShop.Where as in the scenarios of consumer sending this feild, it represents `number of product items` inside the order. Consumers are expected to handle the scenario of stopping the end user <u>*when the stock value is 0*</u>
              examples:
                products-data:
                  summary: Products example data
                  value:
                    - productId: 101
                      name: Apple IPhone 13 Pro
                      price: 999.99
                      categoryName: Mobiles
                      quantity: 96
                    - productId: 102
                      name: Samsung S22 Ultra
                      price: 899.99
                      categoryName: Mobiles
                      quantity: 121
                    - productId: 103
                      name: OnePlus 10 Pro 5G
                      price: 750.99
                      categoryName: Mobiles
                      quantity: 67
  /products/{productId}:
    get:
      tags: 
        - Products
      summary: List specific products
      description: |
       Returns product details from
        EasyShop
      operationId: getProductDetails
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 101
      responses:
        '200':
          description: A list of products by id
          content:
            application:/json:
              schema:
                type: object
                properties:
                  productId:
                    type: integer
                  name:
                    type: string
                  price:
                    type: number
                  categoryName:
                    type: string
                  quantity:
                    type: integer
  /orders:
    post:
      tags: 
        - Orders
      summary: Create order
      description: |
        Post order details to EasyShop for processing and shipping
      operationId: postOrder
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      productsId:
                        type: integer
                      name:
                        type: string
                      categoryName: 
                        type: string
                      releaseDate:
                        type: string
                        format: date
                      quantity: 
                        type: integer
                address:
                    $ref: "#/components/schemas/Address"
      responses:   
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties: 
                  orderId: 
                    type: integer 
          links:
            GetOrderByOrderId:
              $ref: '#/components/links/GetOrderByOrderId'
        '500':
          $ref: "#/components/responses/InternalServerError"
    put:
      tags: 
        - Orders
      summary: Update order
      description: |
        Update order details to EasyShop for processing and shipping
      operationId: updateOrder
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      productsId:
                        type: integer
                      name:
                        type: string
                      categoryName: 
                        type: string
                      quantity: 
                        type: integer
                address:
                    $ref: "#/components/schemas/Address"
      responses:   
        '201':
          description: Order details successfully updated
    delete:
      tags: 
        - Orders
      summary: Delete order
      description: |
        Delete order details from EasyShop
      parameters:
        - $ref: "#/components/parameters/orderIdQueryParam"
      responses:   
        '204':
          description: Order details successfully deleted
    get:
      tags: 
        - Orders
      summary: Get order details
      description: |
        Delete order details from 
        EasyShop
      parameters:
        - $ref: "#/components/parameters/orderIdQueryParam"
      responses:
        '200':
          description: Fetch Order details successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  orderId:
                    type: integer
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        productId:
                          type: integer
                        name:
                         type: string
                        price:
                          type: number
                        categoryName:
                          type: string
                        quantity:
                          type: integer
                  address:
                    $ref: "#/components/schemas/Address"
                  city: 
                    $ref: "#/components/schemas/Address"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /orders/{orderId}:
    get:
      tags: 
        - Orders
      summary: Get order details
      description: |
        Delete order details from 
        EasyShop
      operationId: getOrderUsingParams
      deprecated: true
      parameters:
        - $ref: "#/components/parameters/orderIdPathParam"
      responses:
        '200':
          description: Fetch Order details successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  orderId:
                    type: integer
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        productId:
                          type: integer
                        name:
                         type: string
                        price:
                          type: number
                        categoryName:
                          type: string
                        quantity:
                          type: integer
                  address:
                    $ref: "#/components/schemas/Address"
                  city: 
                    $ref: "#/components/schemas/Address"
        '500':
          $ref: "#/components/responses/InternalServerError"
components:
  parameters:
    orderIdQueryParam:
          name: orderId
          in: query
          required: true
          schema:
            type: integer 
    orderIdPathParam:
          name: orderId
          in: path
          required: true
          schema:
            type: integer 
  schemas:
    Address:
      type: object
      properties:
        addressLine:
          type: string
        city:
          type: string
        state:
          type: string
          enum:
           - California
           - Texas
           - Lagos
        zipcode:
          type: string
        isOfficeAddress:
          type: boolean
      required: [addressLine, city, state]
    City:
      allOf:
       - $ref: "#/components/schemas/Address"
       - type: object
         properties: 
          losAngeles:
            type: string
            enum:
            - road 2
            - road 3
    Mobile:
      allOf:
        - type: object
          properties:
            networkType:
              type: string
              enum:
                - 4G
                - 5G
          required: [networkType]
  responses:
    InternalServerError:
      description: |
        An error occured while processing the request. Please contact support
  links:
    GetOrderByOrderId:
      description: >
        The `orderId` value returned in the response can be used as input parameter in `GET /orders`.
      operationId: getProductDetails
      parameters:
        orderId: '$response.body#/orderId'
  securitySchemes: 
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    oAuth2AuthCode:
      type: oauth2
      flows: 
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/api/oauth.access
          scopes:
            read: Read only access
            write: Read Write access
            admin: Admin access 
    
     

                  
